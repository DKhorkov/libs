// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/providers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	trace "go.opentelemetry.io/otel/trace"
	gomock "go.uber.org/mock/gomock"
)

// MockTraceProvider is a mock of TraceProvider interface.
type MockTraceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTraceProviderMockRecorder
	isgomock struct{}
}

// MockTraceProviderMockRecorder is the mock recorder for MockTraceProvider.
type MockTraceProviderMockRecorder struct {
	mock *MockTraceProvider
}

// NewMockTraceProvider creates a new mock instance.
func NewMockTraceProvider(ctrl *gomock.Controller) *MockTraceProvider {
	mock := &MockTraceProvider{ctrl: ctrl}
	mock.recorder = &MockTraceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraceProvider) EXPECT() *MockTraceProviderMockRecorder {
	return m.recorder
}

// Shutdown mocks base method.
func (m *MockTraceProvider) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockTraceProviderMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockTraceProvider)(nil).Shutdown), ctx)
}

// Span mocks base method.
func (m *MockTraceProvider) Span(ctx context.Context, name string, opts ...trace.SpanStartOption) (context.Context, trace.Span) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Span", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(trace.Span)
	return ret0, ret1
}

// Span indicates an expected call of Span.
func (mr *MockTraceProviderMockRecorder) Span(ctx, name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Span", reflect.TypeOf((*MockTraceProvider)(nil).Span), varargs...)
}

// SpanFromTraceID mocks base method.
func (m *MockTraceProvider) SpanFromTraceID(ctx context.Context, traceID trace.TraceID, name string, opts ...trace.SpanStartOption) (context.Context, trace.Span) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, traceID, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SpanFromTraceID", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(trace.Span)
	return ret0, ret1
}

// SpanFromTraceID indicates an expected call of SpanFromTraceID.
func (mr *MockTraceProviderMockRecorder) SpanFromTraceID(ctx, traceID, name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, traceID, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpanFromTraceID", reflect.TypeOf((*MockTraceProvider)(nil).SpanFromTraceID), varargs...)
}

// TraceIDFromHex mocks base method.
func (m *MockTraceProvider) TraceIDFromHex(traceHex string) (trace.TraceID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceIDFromHex", traceHex)
	ret0, _ := ret[0].(trace.TraceID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceIDFromHex indicates an expected call of TraceIDFromHex.
func (mr *MockTraceProviderMockRecorder) TraceIDFromHex(traceHex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceIDFromHex", reflect.TypeOf((*MockTraceProvider)(nil).TraceIDFromHex), traceHex)
}
